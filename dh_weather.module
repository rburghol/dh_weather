<?php

//Implement hook_entity_info().

function dh_weather_entity_info() {

  $return['dh_timeseries_weather'] = array(
    'label' => t('dH TimeSeries Weather'),
    'entity class' => 'dHTimeSeriesWeatherTable',
    'controller class' => 'dHTimeSeriesWeatherTableController',
    'base table' => 'dh_timeseries_weather',
    'fieldable' => TRUE,
   //'bundle of' => '',
    //'exportable' => TRUE,
    'entity keys' => array (
       'name' => 'tid',
        'id' => 'tid',
        'label' => 'tid',
    ),
    'bundles' => array(),
    'bundle keys' => array( 
    ),
    'property info' => array('entity_type', 'featureid', 'tstime', 'tsendtime', 'varid', 'temp', 'wet_time', 'rain', 'rh', 'solar_rad', 'wind_dir', 'wind_spd', 'pres', 'dew_pt', 'tmin', 'tmax'),
    'access callback' => 'dh_feature_access',
    'module' => 'dh',
    // Enable the entity API's admin UI.
    'admin ui' => array(
      'path' => 'admin/content/dh_timeseries_weather',
      'file' => 'dh.weather.admin.inc',
      'controller class' => 'dHTimeSeriesWeatherTableUIController',
    ),
  );
  
  return $return;
}


// Implements hook_entity_property_info_alter().
function dh_weather_entity_property_info_alter(&$entity_info) {

  $feature_fields = &$entity_info['dh_timeseries_weather']['properties'];
  $settable_feat = array('entity_type', 'featureid', 'tstime', 'tsendtime', 'varid', 'temp', 'wet_time', 'rain', 'rh', 'solar_rad', 'wind_dir', 'wind_spd', 'pres', 'dew_pt', 'tmin', 'tmax');
  foreach ($settable_feat as $thiscol) {
    $feature_fields[$thiscol]['setter callback'] = 'entity_property_verbatim_set';
    $feature_fields[$thiscol]['getter callback'] = 'entity_property_verbatim_get';
    $feature_fields[$thiscol]['setter permission'] = 'edit own dh_timeseries entities';
    //$feature_fields[$thiscol]['type'] = 'user';
    $feature_fields[$thiscol]['schema field'] = $thiscol;
    $feature_fields[$thiscol]['label'] = t($thiscol);
    $feature_fields[$thiscol]['description'] = t($thiscol);
  }
}
 

// Implements hook_view_data_alter().

function dh_weather_views_data_alter(&$data) {

  // do date setups
  $defaults_date = array(
    'field' => array(
      'handler' => 'views_handler_field_date',
      'click sortable' => TRUE,
    ),
    'sort' => array(
      'handler' => 'views_handler_sort_date',
    ),
    'filter' => array(
      'handler' => 'views_handler_filter_date',
    ),
  );
   $defaults_numeric = array(
      'title' => t('Numeric Field'),
      'help' => t('Numeric Field.'), // The help that appears on the UI,
      'argument' => array(
         'handler' => 'views_handler_argument_numeric',
      ),
      'field' => array(
         'handler' => 'views_handler_field_numeric',
         'click sortable' => TRUE,
			'float' => TRUE, // enables advanced formatting options
      ),
      'filter' => array(
         'handler' => 'views_handler_filter_numeric',
      ),
      'sort' => array(
         'handler' => 'views_handler_sort',
      )
   );
  
  // join var def to tsdata
   $data['dh_timeseries_weather']['table']['join']['dh_variabledefinition'] = array(
     'left_table' => 'dh_variabledefinition',
     'left_field' => 'hydroid',
     'field' => 'varid'
   );
  
  // TimeSeries data connections
  // join tsdata to var def 
   $data['dh_variabledefinition']['table']['join']['dh_timeseries_weather'] = array(
     'left_table' => 'dh_timeseries_weather',
     'left_field' => 'varid',
     'field' => 'hydroid'
   );
  // join tsdata to dH_feature
   $data['dh_feature']['table']['join']['dh_timeseries_weather'] = array(
     'left_table' => 'dh_timeseries_weather',
     'left_field' => 'featureid',
     'field' => 'hydroid'
   );
  // tells variabledefinition that it has a linkage path to dh_feature THRU dh_timeseries 
   $data['dh_variabledefinition']['table']['join']['dh_feature'] = array(
     'left_table' => 'dh_timeseries_weather',
     'left_field' => 'varid',
     'field' => 'hydroid'
   );
  // join dH_feature to TimeSeries
   $data['dh_timeseries_weather']['table']['join']['dh_feature'] = array(
     'left_table' => 'dh_feature',
     'left_field' => 'hydroid',
     'field' => 'featureid'
   );
   
   $numcols = array('rh', 'temp', 'tmin', 'tmax', 'wet_time', 'rain', 'wind_spd', 'wind_dir', 'solar_rad');
   $strcols = array();
   $datecols = array('tstime', 'tsendtime');
   foreach ($strcols as $thiscol) {
      $data['dh_timeseries_weather'][$thiscol] = $defaults_string;
      $data['dh_timeseries_weather'][$thiscol]['title'] = t("Vitis Data $thiscol");
      $data['dh_timeseries_weather'][$thiscol]['help'] = t("Vitis $thiscol");
   }
   foreach ($numcols as $thiscol) {
      $data['dh_timeseries_weather'][$thiscol] = $defaults_numeric;
      $data['dh_timeseries_weather'][$thiscol]['title'] = t("Vitis $thiscol");
      $data['dh_timeseries_weather'][$thiscol]['help'] = t("Vitis $thiscol");
   }
   foreach ($datecols as $thiscol) {
      $data['dh_timeseries_weather'][$thiscol]['field'] = $defaults_date['field'];
      $data['dh_timeseries_weather'][$thiscol]['sort'] = $defaults_date['sort'];
      $data['dh_timeseries_weather'][$thiscol]['filter'] = $defaults_date['filter'];
   }
   
   //foreach ($datecols as $thiscol) {
   //   $data['dh_timeseries_weather'][$thiscol]['filter'] = array('handler' => 'views_handler_filter_date');
   //}
  
  // for explicit joins
  $e = entity_get_info();
  foreach ($e as $ename => $einfo) {
    $ebase = $einfo['base table'];
    $elabel = $einfo['label'];
    $eidcol = $einfo['entity keys']['id'];
    if ($eidcol) {
      // should go through and add a relationship for all entity types
      $data[$ebase]['cts_weath_' . $ebase] = array(
        'real field' => 'adminid',
        'relationship' => array(
          'title' => 'dH Weather Timeseries Link to ' . $ebase,
          'help' => 'dH Weather Timeseries Link to ' . $ebase,
          'handler' => 'views_handler_relationship',
          'label' => t('dH Weather Table Explicit Join to ' . $elabel),
          'base' => 'dh_timeseries_weather',
          'base field' => 'featureid',
          'left_table' => $ebase,
          'field' => $eidcol,
        )
      );
      if (!isset($data[$ebase]['cts_weath_' . $ebase]['relationship']['extra'])) { 
        $data[$ebase]['cts_weath_' . $ebase]['relationship']['extra'] = array();
      }
      $data[$ebase]['cts_weath_' . $ebase]['relationship']['extra'][] = array(
        'field' => 'entity_type', 
        'value' => $ename
      );
    }
  }
  
}

class dHTimeSeriesWeatherTable extends Entity {

  public $is_new;
  public $tid;
  public $tstime;
  public $utcoffset;
  public $temp;
  public $tmin;
  public $tmax;
  public $wet_time;
  public $rh;
  public $rain;
  public $wind_spd;
  public $wind_dir;
  public $tsendtime;
  public $pres;
  public $dew_pt;
  public $solar_rad;
  public $featureid;
  public $varid;
	public $entity_type;

  public function __construct($values = array()) {
    if (isset($values['year']) or isset($values['month']) or isset($values['day'])) {
      if (isset($values['month'])) {
        $yr = $values['year'];
      } else {
        $yr = date('Y');
      }
      if (isset($values['month'])) {
        $mo = $values['month'];
      } else {
        $mo = '01';
      }
      if (isset($values['day'])) {
        $da = $values['day'];
      } else {
        $da = '01';
      }
      $newts = strtotime("$yr-$mo-$da");
      if (!($newts === false)) {
        $values['tstime'] = $newts;
      }
    }
    foreach (array('tstime', 'tsendtime') as $tvar) {
      if (isset($values[$tvar])) {
        // if a valid unix epoch style timestamp has been submitted 
        // this next comparator will return TRUE
        if (!( !is_int($values[$tvar]) ? (ctype_digit($values[$tvar])) : true ) ) {
          // not a valid unix timestamp, so try to convert from some date format
          $values[$tvar] = strtotime($values[$tvar]);
        } else {
          // valid unix timestamp submitted, proceed without changing
        }
      }
    }
    parent::__construct($values, 'dh_timeseries_weather');
  }
  protected function defaultLabel() {
    return $this->varid;
  }
}


class dHTimeSeriesWeatherTableController extends EntityAPIControllerExportable {

  public function __construct($entityType) {
    parent::__construct($entityType);
  }

  public function create(array $values = array()) {
    // Add values that are specific to our Model
    $values += array( 
      'tid' => '',
      'tstime' => '',
      'utcoffset' => '',
      'temp' => '',
      'tmin' => '',
      'tmax' => '',
      'wet_time' => '',
      'rh' => '',
      'rain' => '',
      'wind_spd' => '',
      'wind_dir' => '',
      'solar_rad' => '',
      'tsendtime' => '',
      'pres' => '',
      'dew_pt' => '',
      'featureid' => '',
      'entity_type' => '',
      'varid' => ''
    );
    $feature_type = parent::create($values);
    return $feature_type;
  }
}

// Helper functions

function dh_get_timeseries_weather(&$values, $multiplicity) {
  // ***********************************************************
  // * Do translations
  //   * make sure the variable is in place and translated to varid
  //   * Translate tstime and tsendtime to seconds since the epoch
  // ***********************************************************
  if (isset($values['tstime'])) {
    $values['tstime'] = dh_handletimestamp($values['tstime']);
  } else {
    return FALSE;
  }
  if (isset($values['tsendtime'])) {
    $values['tsendtime'] = dh_handletimestamp($values['tsendtime']);
  }
  // make sure the variable is in place and translated to varid
  if (isset($values['varid'])) {
    $var = dh_vardef_info($values['varid']);
    if (is_object($var)) {
      $values['varid'] = $var->hydroid;
    }
  }
  $efq = new EntityFieldQuery;
  $efq->entityCondition('entity_type', 'dh_timeseries_weather');
  $efq->propertyCondition('featureid', $values['featureid'], '=');
  if (!$multiplicity == 'all') {
    // if 'all' is requete we ignoire varid, otherwise we want a specific var
    $efq->propertyCondition('varid', $values['varid'], '=');
  }
  $efq->propertyCondition('entity_type', $values['entity_type'], '=');
  $efq->propertyCondition('featureid', $values['featureid'], '=');
  // singular - one record only for featureid/entity_type/varid - clear all if multiple
  //   ex: a birthdate
  // non_singular - just force an insert regardless of duplication
  // tstime_singular - one record for featureid/entity_type/varid/tstime/tsendtime
  switch ($multiplicity) {
    case 'all':
    // returning all
    break;
    
    case 'singular':
    // expects only 1 value, but essentially returns all values
    break;
    
    case 'non_singular':
    // returns any values for this featureid/entity_type
    break;
    
    case 'tstime_singular':
      $efq->propertyCondition('tstime', $values['tstime'], '=');
    break;
    
    case 'tspan_singular':
      $efq->propertyCondition('tstime', $values['tstime'], '=');
      $efq->propertyCondition('tstime', $values['tsendtime'], '=');
    break;
    
    default:
      $efq->propertyCondition('tstime', $values['tstime'], '=');
    break;
  }
  $result = $efq->execute();
  return $result;
}


function dh_update_timeseries_weather($values, $multiplicity = 'tstime_singular') {  
  // must have timestamp, featureid and entity_type
  $notnull = array('featureid', 'entity_type', 'tstime', 'varid');
  foreach ($notnull as $v) {
    if (!isset($values[$v]) or ($values[$v] === NULL)) {
      watchdog('dh_timeseries_weather', "NULL value for dh_timeseries_weather $v");
      return FALSE;
    }
  }
  $result = dh_get_timeseries_weather($values, $multiplicity);
  if (isset($result['dh_timeseries_weather'])) {
    //dpm($result,"found records - checking singularity settings");
    $data = entity_load('dh_timeseries_weather', array_keys($result['dh_timeseries_weather']));
    $record = array_shift($data);
    if (!(strpos($multiplicity, 'singular') === FALSE)) {
      // we need to grab one and delete the others because this is to be singular
      // otherwise, we just take the first one we come to and ignore the rest
      foreach ($data as $todel) {
        entity_delete('dh_timeseries_weather', $todel->tid);
      }
    }
    foreach ($values as $key => $val) {
      $record->$key = $val;
    }
  } else {
    //dpm($values,"creating ts");
    $record = entity_create('dh_timeseries_weather', $values);
  }
  if (is_object($record) and method_exists($record, 'save')) {
    //dpm($record, "updating");
    $record->save();
    return TRUE;
  } else {
    //dpm($record,"record is not object or save() method does not exist");
    return FALSE;
  }
}
